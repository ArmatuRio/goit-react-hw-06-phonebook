{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactItem/ContactItem.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","deleteContact","changeFilter","items","createReducer","state","find","toLowerCase","alert","filter","_","persistConfig","key","storage","blacklist","rootReducer","combineReducers","persistedReducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistore","persistStore","ContactForm","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","this","className","styles","form","form__label","type","pattern","title","required","onChange","Component","connect","dispatch","ContactItem","onDelete","contact","onClick","getVisibleContacts","allContacts","normalizedFilter","includes","contacts","ContactList","map","item","event","target","filter__label","filter__input","App","contactId","prevState","toLocaleLowerCase","visibleContacts","ReactDOM","render","StrictMode","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.fffc0477.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__4TvGi\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__label\":\"Filter_filter__label__3r5QH\",\"filter__input\":\"Filter_filter__input__b9DYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactItem_contact__3ZUAd\"};","import shortid from 'shortid';\n// import types from './contacts-types';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: shortid(),\n    name,\n    number,\n  },\n}));\n\n// export const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: shortid(),\n//     name,\n//     number,\n//   },\n// });\n\nexport const deleteContact = createAction('contacts/delete');\nexport const changeFilter = createAction('contacts/changeFilter');\n\n// export const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// export const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n","// import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import types from './contacts-types';\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\nconst initialContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nexport const items = createReducer(initialContacts, {\n  [addContact]: (state, { payload }) => {\n    const isExistContact = state.find(\n      ({ name }) => name.toLowerCase() === payload.name.toLowerCase(),\n    );\n    if (isExistContact) {\n      alert(`${payload.name} is already in contacts`);\n      return state;\n    }\n    return [...state, payload];\n  },\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n//\n// export const items = (state = initialContacts, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD: {\n//       const isExistContact = state.find(\n//         ({ name }) => name.toLowerCase() === payload.name.toLowerCase(),\n//       );\n//       if (isExistContact) {\n//         alert(`${payload.name} is already in contacts`);\n//         return state;\n//       }\n//       return [...state, payload];\n//     }\n//     case types.DELETE: {\n//       return state.filter(({ id }) => id !== payload);\n//     }\n//     default:\n//       return state;\n//   }\n// };\n\nexport const filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\n// export const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({ items, filter });\n","// import { createStore } from 'redux';\nimport {\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { items, filter } from './contacts-reducer';\n\nconst persistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst rootReducer = combineReducers({ items, filter });\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistore = persistStore(store);\n\n// export default store;\n\n// const store = createStore(contacts, composeWithDevTools());\n","import ProtoTypes from 'prop-types';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styles from './ContactForm.module.css';\nimport { addContact } from '../../redux/contacts-actions';\n\nclass ContactForm extends Component {\n  static propTypes = { onSubmit: ProtoTypes.func.isRequired };\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    this.props.onSubmit(name, number);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label className={styles.form__label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import ProtoTypes from 'prop-types';\nimport styles from './ContactItem.module.css';\nconst ContactItem = ({ name, number, onDelete }) => {\n  return (\n    <>\n      <span className={styles.contact}>\n        {name}: {number}\n      </span>\n      <button type=\"button\" onClick={onDelete}>\n        remove\n      </button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  name: ProtoTypes.string.isRequired,\n  number: ProtoTypes.string.isRequired,\n  id: ProtoTypes.string.isRequired,\n  onDelete: ProtoTypes.func.isRequired,\n};\nexport default ContactItem;\n","import { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts-actions';\nimport ProtoTypes from 'prop-types';\nimport styles from './ContactList.module.css';\nimport ContactItem from '../ContactItem/ContactItem';\nconst ContactList = ({ contacts, onDelete }) => (\n  <ol className={styles.ContactList}>\n    {contacts.map(({ id, name, number }) => (\n      <li className={styles.item} key={id}>\n        <ContactItem\n          name={name}\n          number={number}\n          id={id}\n          onDelete={() => onDelete(id)}\n        />\n      </li>\n    ))}\n  </ol>\n);\n\nContactList.propTypes = {\n  contacts: ProtoTypes.array.isRequired,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ items, filter }) => {\n  // console.log(items);\n  return { contacts: getVisibleContacts(items, filter) };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(deleteContact(id)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts-actions';\nimport ProtoTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.filter__label}>\n    Find contacts by name\n    <input\n      className={styles.filter__input}\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\nFilter.propTypes = {\n  value: ProtoTypes.string,\n  onChange: ProtoTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ filter }) => ({ value: filter });\nconst mapDispatchtoProps = dispatch => ({\n  onChange: event => dispatch(changeFilter(event.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchtoProps)(Filter);\n","import { React, Component } from 'react';\n// import shortid from 'shortid';\n//Components\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   const prevContacts = prevState.contacts;\n  //   const nextContacts = this.state.contacts;\n  //   if (prevContacts !== nextContacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(nextContacts));\n  //   }\n  // }\n\n  // addContact = (nameForAdd, numberForAdd) => {\n  //   const isExistContact = this.state.contacts.find(\n  //     ({ name }) => name === nameForAdd,\n  //   );\n  //   if (isExistContact) {\n  //     alert(`${nameForAdd} is already in contacts`);\n  //     return;\n  //   }\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name: nameForAdd,\n  //     number: numberForAdd,\n  //   };\n  //   this.setState(({ contacts }) => ({ contacts: [contact, ...contacts] }));\n  // };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n    const { filter } = this.state;\n    return (\n      <div className=\"Wrapper\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList contacts={visibleContacts} onDelete={this.deleteContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistore } from './redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistore}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}